//
// SPDX-FileCopyrightText: Copyright 2023-2025 Arm Limited and/or its affiliates <open-source-office@arm.com>
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//

module attributes {tf_saved_model.semantics, tfl.description = "MLIR Converted.", tfl.schema_version = 3 : i32} {
  func.func @main(%arg0: tensor<1x16x16x16xi8> {tf_saved_model.index_path = ["input_3"]}) -> (tensor<1x8x8x16xi8> {tf_saved_model.index_path = ["conv2d"]}) attributes {tf.entry_function = {inputs = "serving_default_input_3:0", outputs = "StatefulPartitionedCall:0"}, tf_saved_model.exported_names = ["serving_default"]} {
    %0 = "tosa.const"() {values = dense<0> : tensor<16xi32>} : () -> tensor<16xi32>
    %1 = "tosa.const"() {values = dense<"0x51266EF1C48A006465B17E2A633507F73841A3812CBF384D83C5CD09263FE5BAA9EB25F5D757332EF4D2B64E2F9D0868AFFB5055023E127D7F70F4016857B4C6BD01A70CF2DF535414454067821F1A2D0658E9B27C026D4714ED4962FF1B3C8C0D372139B749E339A41C033E530D686BCDE610EA33C2A7CD81F52C658BEC1E00ABEE94D130D4ABB9E8527F8A1E7D0B7CD49593961D7EB688470903C14AF52D1777E06042D12C2DF009EBA15E9C4B7B998D649EC406ECFA0A83702E1D06913B433AF158FEF959BDEDA1651435EFF87FBB7DC2C09E3B4A923A373C1EC19840C8F8FA4E1AE0EE20C30204A81B58E023D0337D7FC0280A1423CB6A5721818C8BB73AA344A68E7F09C9EFA0B2E67EC9F460245457F4FA41066CEFC3D9E4E5916A85450EBBAD2CC62FBB3699414F09240CF22FB72277DB60DF3DB2A466BA3C49C38527D85AC3DD512F263CD760E4D8B29FD13F707D25B613D481DB5DB8046DAE7EAD8DC0BACAEB6D7663936B91A65DA22CAC9C3732FF5325F1E28B0D4BE7785DC9303AF747A7FE182BFB7EE32FB0E0F329DF088D33DEEA295E597FA2E6EB4A2A944B9BB9ED6C42F6B85C00B09E756A44F9CB3026025B554D338751F317DB17CA96545899B92EE597FA06BDD7B38A0CC1F6B567F4856F3DF9814130F495F931CF14E4C3F11EF425BEDC2DD3496AFC97633496C65BA2F9EE0E51CB87EA10336BD84D17EEE32601FC7C3946DA41F6626B47852AC25B756C5ACF869DDAE68E11001B741D7FAE3976DE9B64A240DC02ACE72C8CCAC49382B6570F0BF6750FAE9EFEE38AE899DCEF77863556D7A0E8A7921860372A476C34BF213914146F87548A6F1F8A8C8AB373BF92D50C2121FAC912D0AA16955A968344DF728CA791C2737F5E3C67E3D2E99A79E6870AB62C8A7E164DFEE7A120D3F32A1224B51F812712E2915031670ACB1A4BF32539970B556689BD23DD5DD7F162BEEB2D097F68CB872EBCDC2D464A8ED718EC66AC52DCD5F7D2CD82C634A00082F7BDB35BDDF5EB3D61C525B8DFB954B2601D81DA71EA1CA088DFE1F40AE309BE51FAC36304C7E4654690F1954973F98FE77F3F7612AB07BD4296BC00B00919D737C4A4E2A51F9D0982CBFCE8AF5D5EB8A23B8F2E317094878DFC9D41C0C8D4FBB6ABF1E4505384963A26C3A647DF670F4B878FD4DD85B22035BC4CC3C06ACF60EE9483B0C84F1F7A71ECA8BF355AFDABE4BD6D936AA768E45277ED99F68879358364B6A8C7235C747FC0066E8342A642373C3B0660E4110850C978E113751EA7BA47EC6AB18C6487C4C633F8B87269F0975BEC548C98DE7AF37F9BBEED12055E39FB933500D9CD5063681717FBB950242F8269861B15D3E2592C7F539A076C50B673DC0A91B07EBDE6EFE0C5D9E4AB8A1C03173C75A699992030BBAE302D39B027F540B2A3D906CACF40C1727B66"> : tensor<16x2x2x16xi8>} : () -> tensor<16x2x2x16xi8>
    %2 = "tosa.const"() {values = dense<[1931928506, 1951328493, 1755276611, 1934572170, 1932872072, 1944302913, 1932623941, 1949223780, 1952764318, 1948369062, 1947668025, 1899102491, 1913241564, 1948406415, 1912688338, 1935896203]> : tensor<16xi32>} : () -> tensor<16xi32>
    %3 = "tosa.const"() {values = dense<42> : tensor<16xi8>} : () -> tensor<16xi8>
    %4 = "tosa.const"() {values = dense<-128> : tensor<1xi8>} : () -> tensor<1xi8>
    %5 = "tosa.const"() {values = dense<0> : tensor<1xi8>} : () -> tensor<1xi8>
    %6 = "tosa.conv2d"(%arg0, %1, %0, %4, %5) {dilation = array<i64: 1, 1>, pad = array<i64: 0, 0, 0, 0>, stride = array<i64: 2, 2>, acc_type = i32} : (tensor<1x16x16x16xi8>, tensor<16x2x2x16xi8>, tensor<16xi32>, tensor<1xi8>, tensor<1xi8>) -> tensor<1x8x8x16xi32>
    %7 = "tosa.const"() {values = dense<0> : tensor<1xi32>} : () -> tensor<1xi32>
    %8 = "tosa.const"() {values = dense<0> : tensor<1xi8>} : () -> tensor<1xi8>
    %9 = "tosa.rescale"(%6, %2, %3, %7, %8) {rounding_mode = "DOUBLE_ROUND", per_channel = true, scale32 = true,  input_unsigned = false, output_unsigned = false} : (tensor<1x8x8x16xi32>, tensor<16xi32>, tensor<16xi8>, tensor<1xi32>, tensor<1xi8>) -> tensor<1x8x8x16xi8>
    return %9 : tensor<1x8x8x16xi8>
  }
}
