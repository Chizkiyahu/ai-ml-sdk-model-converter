//
// SPDX-FileCopyrightText: Copyright 2025 Arm Limited and/or its affiliates <open-source-office@arm.com>
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
module attributes {tf_saved_model.semantics, tosa.description = "Tosa FBS Converted", tosa.fbs_version = "1.0.0d"} {
  func.func @main(%arg0: tensor<1x17x31x4xf32> {tf_saved_model.index_path = ["input_0"]}, %arg1: tensor<1xf32> {tf_saved_model.index_path = ["input_1"]}) -> (tensor<1x14x29x28xf32> {tf_saved_model.index_path = ["output_0"]}) attributes {tf.entry_function = {inputs = "tosa_deserialized_input_0:0,tosa_deserialized_input_1:0", outputs = "tosa_deserialized_output_0:0"}, tf_saved_model.exported_names = ["tosa_deserialized"]} {
    %0 = "tosa.const"() <{values = dense<"0xtensor<3x3x4x7xf32>}> : () -> tensor<3x3x4x7xf32>
    %1 = "tosa.const"() <{values = dense<0.000000e+00> : tensor<1xf32>}> : () -> tensor<1xf32>
    %2 = "tosa.const"() <{values = dense<0.000000e+00> : tensor<1xf32>}> : () -> tensor<1xf32>
    %3 = tosa.depthwise_conv2d %arg0, %0, %arg1, %1, %2 {acc_type = f32, dilation = array<i64: 2, 2>, pad = array<i64: 1, 0, 1, 1>, stride = array<i64: 1, 1>} : (tensor<1x17x31x4xf32>, tensor<3x3x4x7xf32>, tensor<1xf32>, tensor<1xf32>, tensor<1xf32>) -> tensor<1x14x29x28xf32>
    return %3 : tensor<1x14x29x28xf32>
  }
}
